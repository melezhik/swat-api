%= bootstrap 'all'
%== include 'app_header'

<div class="panel panel-primary"">
  <div class="panel-heading">SWAT - frequently asked questions</div>
  <div class="panel-body">

    <blockquote>
        What is a swat story?
    </blockquote>

    <i> Swat story is essential abstraction to describe elementary swat test.
    It consists of 3 components or answer on 2 following questions:</i>

    <pre>
    1. What kind of http request will be send?
    2. What kind of http response is expected to receive?
    </pre>

    <i>A three components make a swat story:<br><br>
    1. http resource ( or http endpoint ) - defined by directory path:</i>

    <pre>
    $ mkdir foo/           # for resource    /foo
    $ mkdir foo/bar/       # for resource    /foo/bar
    $ mkdir -p bar/baz     # for resource    /bar/baz
    </pre>

    <i>2. http verb or http method - defined by http method file:</i>

    <pre>
    $ touch get.txt    # for GET
    $ touch post.txt   # for POST
    $ touch put.txt    # for PUT
    # ... so on, see next question concerning defining http verbs 
    </pre>


    <i>3. expected content returned on given request sent - defined by content of http file:</i>

    <pre>
    $ cat get.txt
    200 OK
    <title>Hello World</title>
    </pre>

    <blockquote>
        What is a swat project?
    </blockquote>

    <i>Swat project is the set of swat stories. Technically speaking it's a directory holding all the swat resources and 
http method files, see also previous question "What is swat story?". This is example of swat project file structure:</i>

    <pre>
        project/
        ├── baz
        │   ├── swat.ini
        │   ├── get.txt
        │   └── hook.pm
        ├── foo
        │   ├── bar
        │   │   ├── post.txt
        │   │   └── hook.pm
        │   ├── get.txt
        │   └── hook.pm
        └── host
        
    </pre>

    <blockquote>
        What is a swat story directory?
    </blockquote>

    <i>This is a directory defining a swat story, from other hand it's directory defining a http resource:</i>

    <pre>
    $ mkdir foo             # story `foo' or http resource /foo
    $ mkdir -p foo/bar/baz  # story `foo/bar/baz' or http resource /foo/bar/baz
    </pre>

    Also please take a look at "What is a swat story?" question.

    <blockquote>
        What is a http resource directory?
    </blockquote>

    <i>This is a synonym for swat story directory with emphasis of fact that swat story directories acts in two ways - as containers for http method files and as the names for http resources </i>

    <blockquote>
        What is a http request file?
    </blockquote>

    <i> This is the synonym for http method file with emphasis on the fact that couple of things http resource directory and http method file makes a real http request to be sent to server</i>

    <blockquote>
        Is swat story equal to a single test?
    </blockquote>

    <i>Basicly yes. If swat story directory contain only one http request file than it is true:</i>

    <pre>
    # a single test will be performed according this swat story:
    # GET /foo
    $ mkdir foo
    $ touch foo/get.txt
    </pre>

    <i>but if swat story contains more than one http request files than every file will be resulted in sending a specific http request, so we have 2 tests per one swat story: </i>

    <pre>
    # a 2 single tests will be performed according this swat story:

    # GET /foo
    # and
    # POST /foo
    $ mkdir foo
    $ touch foo/get.txt
    $ touch foo/post.txt
    </pre>

    <blockquote>
        How can I define different http verbs using swat ?
    </blockquote>

    <i>use a predefined file names to define http verbs:</i>

    <pre>
    $ touch get.txt     # for GET     request
    $ touch post.txt    # for POST    request
    $ touch delete.txt  # for DELETE  request
    $ touch put.txt     # for PUT     request
    </pre>

    <blockquote>
        I have one http resource directory and two http method files get.txt and post.txt how can I setup http requests differently using swat ini file?
    </blockquote>

    <i>Swat exports special environment variables to identify http method and other swat data inside ini file. <br>
    As swat ini files are bash script you may use bash conditional here. This is example on it:</i>

    <pre>
    $ touch get.txt
    $ touch post.txt
    $ cat swat.ini
    if test "${http_method}" = "GET"; then
        : # do something
    elif test "${http_method}" = "POST"; then
        : # do something
    fi
    </pre>

    <blockquote>
        How can I do POST request using swat ?
    </blockquote>

    <i>Use post.txt as http method file and set curl_params variable inside swat.ini file to define proper request parameters:</i>

    <pre>

    # given a request POST /foo with query parameters: greeting=hello and name=swat 

    # define http resource and http verb:

    $ mkdir foo/
    $ touch foo/post.txt
    
    # define query parameters:
    
    $ cat foo/swat.ini

    curl_params='-d greeting=hello -d name=swat'
    </pre>

    <blockquote>
        How can I do GET request with parameters ?
    </blockquote>

    <i>Use get.txt as http method file and set curl_params variable inside swat.ini file to define proper request parameters:</i>

    <pre>

    # given a request GET /foo?greeting=hello&name=swat 

    # define http resource and http verb:

    $ mkdir foo/
    $ touch foo/post.txt
    
    # define query parameters:
    
    $ cat foo/swat.ini

    curl_params='-G -d greeting=hello -d name=swat'
    </pre>

    <blockquote>
        What is swat ini file ?
    </blockquote>

    <i>Swat ini files are a tiny bash scripts to set additional parameters for swat stories. 

    <br><br>

    There are various levels swat ini files:  per project level ($project_root_directory/swat.ini), perl user's home level (~/swat.ini) and finally  per story level ( $story_resource_dir/swat.ini ). 

    <br><br>

    Various levels ini files get merged according level priority, when swat find the same settings defined at different swat.ini fil locations the location with highest priority wins, pleas read more about this on swat documentation pages. <br><br> 

    Basically people use swat ini files on per story basis to setup / adjust
    some parameters for given story. For example: </i>

    <pre>

    # define some query parameter for GET foo/bar :
    $ touch foo/bar/get.txt
    $ cat foo/bar/swat.ini
    curl_params='-G -d foo=1 -d bar=2'

    # mark story foo/bar/baz  as swat module:
    $ touch foo/bar/baz/get.txt
    $ cat foo/bar/baz/swat.ini
    swat_module=1

    </pre>

    <blockquote>
        What is swat downstream story ?
    </blockquote>

    <i>First of all this is regular swat story, and then it is a story get called from other story named upstream story. Thus downstream stories are never executed as standalone tests but should considered
like reusable swat stories or modules, for example:</i>

    <pre>
    # this is upstream swat story

    $ mkdir restricted-resource
    $ touch restricted-resource/get.txt
    $ cat restricted-resource/hook.pm

        # to run downstream story
        # use run_swat_module() function
        # inside story hook
        run_swat_module( POST => '/login')

    # and this one is downstream story
    # to make story downstream
    # simple say swat_module=1
    # inside story ini file:

    $ mkdir login/
    $ touch login/post.txt
    $ echo swat_module=1 > login/swat.ini
    </pre>

    <blockquote>
        How can I do more then one request at one test file ?
    </blockquote>
    
    Use swat meta type to define a meta story and then call downstream stories
    inside meta story. Meta story acts like container for multiple http requests.
    
    <pre>
    # make GET foo/
    # then POST bar/ 
    # then GET foo/bar 

    # create meta story

    $ mkdir meta-story
    $ cat meta-story/meta.txt

        Creating this file
        We denote story type as meta
        That means this story
        Does not relate any http request
        But instead run other stories
        Via hook.pm file
        The content of meta file
        Will be shown 
        During test execution

    $ cat meta-story/hook.pm

        run_swat_module( GET => '/foo' );
        run_swat_module( POST => '/bar' );
        run_swat_module( GET => '/foo/bar' );
    </pre>

    <blockquote>
        What is swat check list ?
    </blockquote>

    <i>This is content of http method file. The reason to call content of http method file as
    check list is lines of these files define check pattern to validate content returned by server.
For example: </i>

    <pre>
    $ cat post.txt
    201 Create
    New item created
    </pre>

    <blockquote>
        What is swat check file?
    </blockquote>

    <i>It's just a synonym for swat http method file term, emphasising the fact that http method file contains check patterns
to validate server response, see also question "What is swat check list ?"</i>


    <blockquote>
        If I live  swat check files empty what kind of checking would be performed?
    </blockquote>

    <i>By default swat perform a basic http checks based on existence of http method files and resource directories.
F..e if you have directory foo/bar and file foo/bar/get.txt swat will send http request GET /foo/bar and verify that it succeed, meaning a successful http code returned ( status code  >= 200 and < 400 ). If you need to verify content returned by request you need to add some check patterns to swat check file, f.e. <code>echo 'Hi! This is cool server here' >> foo/bar/get.txt </code></i>

  </div>
</div>

%== include 'app_footer'


